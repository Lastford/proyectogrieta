/*
 * PFCView.java
 */

package pfc;

import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageDecoder;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.swing.*;
import jigl.image.ImageNotSupportedException;

/**
 * The application's main frame.
 */
public class PFCView extends FrameView {

    public PFCView(SingleFrameApplication app) {
        super(app);
        
        initComponents();        
        canvasSetup();
        toolInits();        
        
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PFCApp.getApplication().getMainFrame();
            aboutBox = new PFCAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PFCApp.getApplication().show(aboutBox);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        seleccionButton = new javax.swing.JButton();
        drawPanel = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        horizontalButton = new javax.swing.JButton();
        verticalButton = new javax.swing.JButton();
        diagonal1Button = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        jButton6 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton9 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pfc.PFCApp.class).getContext().getResourceMap(PFCView.class);
        seleccionButton.setIcon(resourceMap.getIcon("seleccionButton.icon")); // NOI18N
        seleccionButton.setToolTipText(resourceMap.getString("seleccionButton.toolTipText")); // NOI18N
        seleccionButton.setFocusable(false);
        seleccionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seleccionButton.setName("seleccionButton"); // NOI18N
        seleccionButton.setSelected(true);
        seleccionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        seleccionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(seleccionButton);

        drawPanel.setToolTipText(resourceMap.getString("drawPanel.toolTipText")); // NOI18N
        drawPanel.setName("drawPanel"); // NOI18N
        drawPanel.setLayout(new java.awt.BorderLayout());

        jToolBar2.setRollover(true);
        jToolBar2.setName("jToolBar2"); // NOI18N

        horizontalButton.setIcon(resourceMap.getIcon("horizontalButton.icon")); // NOI18N
        horizontalButton.setFocusable(false);
        horizontalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        horizontalButton.setName("horizontalButton"); // NOI18N
        horizontalButton.setSelected(true);
        horizontalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        horizontalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizActionPerformed(evt);
            }
        });
        jToolBar2.add(horizontalButton);

        verticalButton.setIcon(resourceMap.getIcon("verticalButton.icon")); // NOI18N
        verticalButton.setFocusable(false);
        verticalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        verticalButton.setName("verticalButton"); // NOI18N
        verticalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        verticalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertActionPerformed(evt);
            }
        });
        jToolBar2.add(verticalButton);

        diagonal1Button.setIcon(resourceMap.getIcon("diagonal1Button.icon")); // NOI18N
        diagonal1Button.setFocusable(false);
        diagonal1Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        diagonal1Button.setName("diagonal1Button"); // NOI18N
        diagonal1Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        diagonal1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diag1ActionPerformed(evt);
            }
        });
        jToolBar2.add(diagonal1Button);

        jToolBar3.setRollover(true);
        jToolBar3.setName("jToolBar3"); // NOI18N

        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setName("jButton6"); // NOI18N
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversaButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton6);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dilatación (Max)", "Erosión (Mín)", "Apertura", "Clausura", "Gradiente", "Top-Hat (Claro)", "Top-Hat (Oscuro)" }));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jToolBar3.add(jComboBox1);

        jButton9.setIcon(resourceMap.getIcon("jButton9.icon")); // NOI18N
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setName("jButton9"); // NOI18N
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton9);

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarizacionButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton2);

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setName("jButton3"); // NOI18N
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton3);

        jToolBar4.setRollover(true);
        jToolBar4.setName("jToolBar4"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jToolBar4.add(jLabel1);

        jSlider1.setMajorTickSpacing(51);
        jSlider1.setMaximum(255);
        jSlider1.setMinorTickSpacing(17);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(153);
        jSlider1.setName("jSlider1"); // NOI18N
        jToolBar4.add(jSlider1);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jToolBar4.add(jLabel2);

        jSlider2.setMajorTickSpacing(10);
        jSlider2.setMaximum(52);
        jSlider2.setMinimum(2);
        jSlider2.setMinorTickSpacing(5);
        jSlider2.setPaintLabels(true);
        jSlider2.setPaintTicks(true);
        jSlider2.setValue(10);
        jSlider2.setName("jSlider2"); // NOI18N
        jToolBar4.add(jSlider2);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(471, Short.MAX_VALUE))
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1398, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText(resourceMap.getString("newMenuItem.text")); // NOI18N
        newMenuItem.setName("newMenuItem"); // NOI18N
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(pfc.PFCApp.class).getContext().getActionMap(PFCView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenu2.setIcon(resourceMap.getIcon("jMenu2.icon")); // NOI18N
        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText(resourceMap.getString("jCheckBoxMenuItem2.text")); // NOI18N
        jCheckBoxMenuItem2.setName("jCheckBoxMenuItem2"); // NOI18N
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contraer50ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText(resourceMap.getString("jCheckBoxMenuItem3.text")); // NOI18N
        jCheckBoxMenuItem3.setName("jCheckBoxMenuItem3"); // NOI18N
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contraer75ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem3);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText(resourceMap.getString("jCheckBoxMenuItem1.text")); // NOI18N
        jCheckBoxMenuItem1.setName("jCheckBoxMenuItem1"); // NOI18N
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contraer100ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contraerPersonalizadoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenu1.add(jMenu2);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1398, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1228, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoMenuItemActionPerformed
        // TODO add your handling code here:
        miCanvas.clear();
        miCanvas.zoom();

        imagenOriginal = null;
        imagenProcesada = null;

        if (curButton == seleccionButton) {
            toolSelectall.deSelect(miCanvas);
        }

        arr = inicializarEltoEstructural(1);
        curDirecc.setSelected(false);
        curDirecc = horizontalButton;
        curDirecc.setSelected(true);

    }//GEN-LAST:event_nuevoMenuItemActionPerformed

    private void seleccionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionButtonActionPerformed
        
        if (curButton == seleccionButton) {
            toolSelectall.deSelect(miCanvas);
        }
      
        curButton.setSelected(false);
        curButton = seleccionButton;
        curButton.setSelected(true);
        currentTool = toolSelectall;
        
    }//GEN-LAST:event_seleccionButtonActionPerformed

    private void abrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMenuItemActionPerformed
        // TODO add your handling code here:
        abrirImagen();
        miCanvas.zoom();

        imagenOriginal = miCanvas.getBufferedImage();
    }//GEN-LAST:event_abrirMenuItemActionPerformed

    private void salirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirMenuItemActionPerformed

    private void contraer50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contraer50ActionPerformed
        // TODO add your handling code here:
        miCanvas.setZoom(0.5);
        miCanvas.repaint();
    }//GEN-LAST:event_contraer50ActionPerformed

    private void contraer75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contraer75ActionPerformed
        // TODO add your handling code here:
        miCanvas.setZoom(0.75);
        miCanvas.repaint();
    }//GEN-LAST:event_contraer75ActionPerformed

    private void contraerPersonalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contraerPersonalizadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contraerPersonalizadoActionPerformed

    private void contraer100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contraer100ActionPerformed
        // TODO add your handling code here:
        miCanvas.setZoom(1.0);
        miCanvas.repaint();
    }//GEN-LAST:event_contraer100ActionPerformed

    private void binarizacionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarizacionButtonActionPerformed
        java.awt.image.BufferedImage imgBin = Morfologia.pasarabyn(imagenProcesada, toolSelectall, jSlider1.getValue());
        miCanvas.setBufferedImage(imgBin);

        System.out.println("Binarización finalizada...");
    }//GEN-LAST:event_binarizacionButtonActionPerformed

    private void resultadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoButtonActionPerformed
        BufferedImage imagenBin = miCanvas.getBufferedImage();

        java.awt.image.BufferedImage imgRes = Morfologia.verResultados(imagenOriginal, imagenBin, toolSelectall);
        miCanvas.setBufferedImage(imgRes);

        System.out.println("Resultados finalizados...");
    }//GEN-LAST:event_resultadoButtonActionPerformed

    private void horizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizActionPerformed

        if (curDirecc != horizontalButton) {
            arr = inicializarEltoEstructural(1);            
            curDirecc.setSelected(false);
            curDirecc = horizontalButton;
            curDirecc.setSelected(true);
        }
    }//GEN-LAST:event_horizActionPerformed

    private void vertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertActionPerformed

        if (curDirecc != verticalButton) {            
            arr = inicializarEltoEstructural(2);
            curDirecc.setSelected(false);
            curDirecc = verticalButton;
            curDirecc.setSelected(true);
        }
        
    }//GEN-LAST:event_vertActionPerformed

    private void diag1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diag1ActionPerformed

        if (curDirecc != diagonal1Button) {
            arr = inicializarEltoEstructural(3);
            curDirecc.setSelected(false);
            curDirecc = diagonal1Button;
            curDirecc.setSelected(true);
        }

    }//GEN-LAST:event_diag1ActionPerformed

    private void inversaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversaButtonActionPerformed
        // TODO add your handling code here:
        BufferedImage imgOrig = miCanvas.getBufferedImage();

        imagenProcesada = Morfologia.inversa(imgOrig);
        miCanvas.setBufferedImage(imagenProcesada);

        System.out.println("Inversa finalizada...");
    }//GEN-LAST:event_inversaButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
//        BufferedImage imgOrig = miCanvas.getBufferedImage();
//
//        try {
//            imagenProcesada = Morfologia.dilatacion(imgOrig, toolSelectall,arr);
//            miCanvas.setBufferedImage(imagenProcesada);
//        } catch (ImageNotSupportedException ex) {
//            Logger.getLogger(PFCView.class.getName()).log(Level.SEVERE, null, ex);
//        }

        realizarTratamiento();
        System.out.println("Dilatación finalizada...");
    }//GEN-LAST:event_runButtonActionPerformed

    private void canvasSetup() {
        miCanvas = new MiCanvas();
        miCanvas.setBackground(Color.gray);
        drawPanel.add(miCanvas);

        miCanvas.zoom();        

        System.out.println("Lienzo creado correctamente...");

        miCanvas.requestFocus();
        
        miCanvas.pictureScrollPane.getViewport().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        miCanvas.pictureScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {

            //************************MOUSE PRESSED
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                int viewX = (int) miCanvas.pictureScrollPane.getViewport().getViewPosition().getX();
                int viewY = (int) miCanvas.pictureScrollPane.getViewport().getViewPosition().getY();
                int w = miCanvas.ancho;
                int h = miCanvas.alto;

                //****************THIS IS A NORMAL CLICK                

                int newX = (evt.getX() + viewX);
                int newY = (evt.getY() + viewY);
                if ((newX < w) && (newY < h) && (newX >= 0) && (newY >= 0)) {

                    MouseEvent newEvt = new MouseEvent((Component) evt.getSource(), evt.getID(),
                            evt.getWhen(), evt.getModifiers(),
                            newX, newY, evt.getClickCount(), false);

                    currentTool.clickAction(newEvt, miCanvas);
                }
            }

            //************************MOUSE RELEASED
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                int viewX = (int) miCanvas.pictureScrollPane.getViewport().getViewPosition().getX();
                int viewY = (int) miCanvas.pictureScrollPane.getViewport().getViewPosition().getY();
                int w = miCanvas.ancho;
                int h = miCanvas.alto;                

                int newX = (evt.getX() + viewX);
                int newY = (evt.getY() + viewY);

                if ((newX < w) && (newY < h) && (newX >= 0) && (newY >= 0)) {
                    MouseEvent newEvt = new MouseEvent((Component) evt.getSource(), evt.getID(),
                            evt.getWhen(), evt.getModifiers(),
                            newX, newY, evt.getClickCount(), false);
                    currentTool.mouseReleaseAction(newEvt, miCanvas);
                }
            }
        });

        miCanvas.pictureScrollPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            //************************MOUSE DRAGGED
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                int viewX = (int) miCanvas.pictureScrollPane.getViewport().getViewPosition().getX();
                int viewY = (int) miCanvas.pictureScrollPane.getViewport().getViewPosition().getY();
                
                int newX = (evt.getX() + viewX);
                int newY = (evt.getY() + viewY);

                MouseEvent newEvt = new MouseEvent((Component) evt.getSource(), evt.getID(),
                        evt.getWhen(), evt.getModifiers(),
                        newX, newY, evt.getClickCount(), false);

                currentTool.dragAction(newEvt, miCanvas);
            }
        });
    }

    public void toolInits() {
        curButton = seleccionButton;
        curDirecc = horizontalButton;        

        toolSelectall = new selectallTool();
        //toolZoom = new zoomTool();

        currentTool = toolSelectall;
        //curZoom = zoom1;
    }
    

    private float[][] inicializarEltoEstructural(int num) {        

        switch (num) {
            case 1:
                arr = new float[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
//                        if (i == 1) {
                            arr[i][j] = 0;
//                        } else {
//                            arr[i][j] = 0;
//                        }
                    }
                }
                break;
            case 2:
                arr = new float[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 1) {
                            arr[i][j] = 1;
                        } else {
                            arr[i][j] = 0;
                        }
                    }
                }
                break;
            case 3:
                arr = new float[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (i + j == 2) {
                            arr[i][j] = 1;
                        } else {
                            arr[i][j] = 0;
                        }
                    }
                }
                break;
            case 4:
                arr = new float[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (i == j) {
                            arr[i][j] = 1;
                        } else {
                            arr[i][j] = 0;
                        }
                    }
                }
                break;
            default:
                arr = new float[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (i == 2) {
                            arr[i][j] = 1;
                        } else {
                            arr[i][j] = 0;
                        }
                    }
                }
                break;
        }
        return arr;
    }


    private void abrirImagen() {
        
        System.out.println("Cargando una nueva imagen...");

        //Creamos la ventana de selección de imagen de aplicación
        JFileChooser dialogo = new JFileChooser();
        //Creamos el filtro de archivos
        ExampleFileFilter filter = new ExampleFileFilter("jpg");
        filter.addExtension("jpeg");

        dialogo.setDialogTitle("Seleccione una imagen para mostrar...");
        dialogo.setApproveButtonText("Abrir");
        dialogo.setMultiSelectionEnabled(false);
        dialogo.setAcceptAllFileFilterUsed(false);
        dialogo.addChoosableFileFilter(filter);
        dialogo.setCurrentDirectory(new java.io.File("C:\\"));

        if (dialogo.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            //Recuperamos el fichero seleccionado
            File fichero = dialogo.getSelectedFile();
            
            //Si el fichero existe y puede ser leído...
            if (fichero.exists() && fichero.canRead()) {
                //Cargamos la imagen gráfica
                try {
                    FileInputStream fis = new FileInputStream(fichero);
                    JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(fis);                    
                    miCanvas.setBufferedImage(decoder.decodeAsBufferedImage());
                    fis.close();
                } catch (IOException ex) {
                    Logger.getLogger(PFCView.class.getName()).log(Level.SEVERE, null, ex);
                }              
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton diagonal1Button;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JButton horizontalButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton seleccionButton;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton verticalButton;
    // End of variables declaration//GEN-END:variables

    public MiCanvas miCanvas;
    public ourTool currentTool;
    public JButton curButton = seleccionButton;
    public JButton curDirecc = horizontalButton;
    public boolean resize = false;
    public BufferedImage imagenOriginal = null;
    public BufferedImage imagenProcesada = null;
    public float[][] arr = inicializarEltoEstructural(1);

    public selectallTool toolSelectall;
    public zoomTool toolZoom;

    private JDialog aboutBox;

    private void realizarTratamiento() {
//        BufferedImage imgOrig = miCanvas.getBufferedImage();
        try {
            imagenProcesada = Morfologia.comodin(imagenOriginal, toolSelectall, arr, jComboBox1.getSelectedIndex());
            miCanvas.setBufferedImage(imagenProcesada);
        } catch (ImageNotSupportedException ex) {
            Logger.getLogger(PFCView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
